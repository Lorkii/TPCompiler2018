Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> programme
Rule 1     programme -> statement ; programme
Rule 2     programme -> structure programme
Rule 3     programme -> statement ;
Rule 4     programme -> structure
Rule 5     statement -> assignation
Rule 6     statement -> PRINT expression
Rule 7     structure -> WHILE expression { programme }
Rule 8     structure -> IF expression { programme }
Rule 9     expression -> STRING + STRING
Rule 10    expression -> expression ADD_OP expression
Rule 11    expression -> expression MUL_OP expression
Rule 12    expression -> expression COMP_OP expression
Rule 13    expression -> NUMBER
Rule 14    expression -> IDENTIFIER
Rule 15    expression -> BOOLEAN
Rule 16    expression -> STRING
Rule 17    expression -> ( expression )
Rule 18    expression -> ADD_OP expression
Rule 19    assignation -> IDENTIFIER = expression

Terminals, with rules where they appear

(                    : 17
)                    : 17
+                    : 9
;                    : 1 3
=                    : 19
ADD_OP               : 10 18
BOOLEAN              : 15
COMP_OP              : 12
IDENTIFIER           : 14 19
IF                   : 8
MUL_OP               : 11
NUMBER               : 13
PRINT                : 6
STRING               : 9 9 16
WHILE                : 7
error                : 
{                    : 7 8
}                    : 7 8

Nonterminals, with rules where they appear

assignation          : 5
expression           : 6 7 8 10 10 11 11 12 12 17 18 19
programme            : 1 2 7 8 0
statement            : 1 3
structure            : 2 4

Parsing method: LALR

state 0

    (0) S' -> . programme
    (1) programme -> . statement ; programme
    (2) programme -> . structure programme
    (3) programme -> . statement ;
    (4) programme -> . structure
    (5) statement -> . assignation
    (6) statement -> . PRINT expression
    (7) structure -> . WHILE expression { programme }
    (8) structure -> . IF expression { programme }
    (19) assignation -> . IDENTIFIER = expression

    PRINT           shift and go to state 5
    WHILE           shift and go to state 6
    IF              shift and go to state 7
    IDENTIFIER      shift and go to state 8

    programme                      shift and go to state 1
    statement                      shift and go to state 2
    structure                      shift and go to state 3
    assignation                    shift and go to state 4

state 1

    (0) S' -> programme .



state 2

    (1) programme -> statement . ; programme
    (3) programme -> statement . ;

    ;               shift and go to state 9


state 3

    (2) programme -> structure . programme
    (4) programme -> structure .
    (1) programme -> . statement ; programme
    (2) programme -> . structure programme
    (3) programme -> . statement ;
    (4) programme -> . structure
    (5) statement -> . assignation
    (6) statement -> . PRINT expression
    (7) structure -> . WHILE expression { programme }
    (8) structure -> . IF expression { programme }
    (19) assignation -> . IDENTIFIER = expression

    $end            reduce using rule 4 (programme -> structure .)
    }               reduce using rule 4 (programme -> structure .)
    PRINT           shift and go to state 5
    WHILE           shift and go to state 6
    IF              shift and go to state 7
    IDENTIFIER      shift and go to state 8

    structure                      shift and go to state 3
    programme                      shift and go to state 10
    statement                      shift and go to state 2
    assignation                    shift and go to state 4

state 4

    (5) statement -> assignation .

    ;               reduce using rule 5 (statement -> assignation .)


state 5

    (6) statement -> PRINT . expression
    (9) expression -> . STRING + STRING
    (10) expression -> . expression ADD_OP expression
    (11) expression -> . expression MUL_OP expression
    (12) expression -> . expression COMP_OP expression
    (13) expression -> . NUMBER
    (14) expression -> . IDENTIFIER
    (15) expression -> . BOOLEAN
    (16) expression -> . STRING
    (17) expression -> . ( expression )
    (18) expression -> . ADD_OP expression

    STRING          shift and go to state 12
    NUMBER          shift and go to state 14
    IDENTIFIER      shift and go to state 15
    BOOLEAN         shift and go to state 16
    (               shift and go to state 17
    ADD_OP          shift and go to state 13

    expression                     shift and go to state 11

state 6

    (7) structure -> WHILE . expression { programme }
    (9) expression -> . STRING + STRING
    (10) expression -> . expression ADD_OP expression
    (11) expression -> . expression MUL_OP expression
    (12) expression -> . expression COMP_OP expression
    (13) expression -> . NUMBER
    (14) expression -> . IDENTIFIER
    (15) expression -> . BOOLEAN
    (16) expression -> . STRING
    (17) expression -> . ( expression )
    (18) expression -> . ADD_OP expression

    STRING          shift and go to state 12
    NUMBER          shift and go to state 14
    IDENTIFIER      shift and go to state 15
    BOOLEAN         shift and go to state 16
    (               shift and go to state 17
    ADD_OP          shift and go to state 13

    expression                     shift and go to state 18

state 7

    (8) structure -> IF . expression { programme }
    (9) expression -> . STRING + STRING
    (10) expression -> . expression ADD_OP expression
    (11) expression -> . expression MUL_OP expression
    (12) expression -> . expression COMP_OP expression
    (13) expression -> . NUMBER
    (14) expression -> . IDENTIFIER
    (15) expression -> . BOOLEAN
    (16) expression -> . STRING
    (17) expression -> . ( expression )
    (18) expression -> . ADD_OP expression

    STRING          shift and go to state 12
    NUMBER          shift and go to state 14
    IDENTIFIER      shift and go to state 15
    BOOLEAN         shift and go to state 16
    (               shift and go to state 17
    ADD_OP          shift and go to state 13

    expression                     shift and go to state 19

state 8

    (19) assignation -> IDENTIFIER . = expression

    =               shift and go to state 20


state 9

    (1) programme -> statement ; . programme
    (3) programme -> statement ; .
    (1) programme -> . statement ; programme
    (2) programme -> . structure programme
    (3) programme -> . statement ;
    (4) programme -> . structure
    (5) statement -> . assignation
    (6) statement -> . PRINT expression
    (7) structure -> . WHILE expression { programme }
    (8) structure -> . IF expression { programme }
    (19) assignation -> . IDENTIFIER = expression

    $end            reduce using rule 3 (programme -> statement ; .)
    }               reduce using rule 3 (programme -> statement ; .)
    PRINT           shift and go to state 5
    WHILE           shift and go to state 6
    IF              shift and go to state 7
    IDENTIFIER      shift and go to state 8

    statement                      shift and go to state 2
    programme                      shift and go to state 21
    structure                      shift and go to state 3
    assignation                    shift and go to state 4

state 10

    (2) programme -> structure programme .

    $end            reduce using rule 2 (programme -> structure programme .)
    }               reduce using rule 2 (programme -> structure programme .)


state 11

    (6) statement -> PRINT expression .
    (10) expression -> expression . ADD_OP expression
    (11) expression -> expression . MUL_OP expression
    (12) expression -> expression . COMP_OP expression

    ;               reduce using rule 6 (statement -> PRINT expression .)
    ADD_OP          shift and go to state 22
    MUL_OP          shift and go to state 23
    COMP_OP         shift and go to state 24


state 12

    (9) expression -> STRING . + STRING
    (16) expression -> STRING .

    +               shift and go to state 25
    ADD_OP          reduce using rule 16 (expression -> STRING .)
    MUL_OP          reduce using rule 16 (expression -> STRING .)
    COMP_OP         reduce using rule 16 (expression -> STRING .)
    ;               reduce using rule 16 (expression -> STRING .)
    {               reduce using rule 16 (expression -> STRING .)
    )               reduce using rule 16 (expression -> STRING .)


state 13

    (18) expression -> ADD_OP . expression
    (9) expression -> . STRING + STRING
    (10) expression -> . expression ADD_OP expression
    (11) expression -> . expression MUL_OP expression
    (12) expression -> . expression COMP_OP expression
    (13) expression -> . NUMBER
    (14) expression -> . IDENTIFIER
    (15) expression -> . BOOLEAN
    (16) expression -> . STRING
    (17) expression -> . ( expression )
    (18) expression -> . ADD_OP expression

    STRING          shift and go to state 12
    NUMBER          shift and go to state 14
    IDENTIFIER      shift and go to state 15
    BOOLEAN         shift and go to state 16
    (               shift and go to state 17
    ADD_OP          shift and go to state 13

    expression                     shift and go to state 26

state 14

    (13) expression -> NUMBER .

    ADD_OP          reduce using rule 13 (expression -> NUMBER .)
    MUL_OP          reduce using rule 13 (expression -> NUMBER .)
    COMP_OP         reduce using rule 13 (expression -> NUMBER .)
    ;               reduce using rule 13 (expression -> NUMBER .)
    {               reduce using rule 13 (expression -> NUMBER .)
    )               reduce using rule 13 (expression -> NUMBER .)


state 15

    (14) expression -> IDENTIFIER .

    ADD_OP          reduce using rule 14 (expression -> IDENTIFIER .)
    MUL_OP          reduce using rule 14 (expression -> IDENTIFIER .)
    COMP_OP         reduce using rule 14 (expression -> IDENTIFIER .)
    ;               reduce using rule 14 (expression -> IDENTIFIER .)
    {               reduce using rule 14 (expression -> IDENTIFIER .)
    )               reduce using rule 14 (expression -> IDENTIFIER .)


state 16

    (15) expression -> BOOLEAN .

    ADD_OP          reduce using rule 15 (expression -> BOOLEAN .)
    MUL_OP          reduce using rule 15 (expression -> BOOLEAN .)
    COMP_OP         reduce using rule 15 (expression -> BOOLEAN .)
    ;               reduce using rule 15 (expression -> BOOLEAN .)
    {               reduce using rule 15 (expression -> BOOLEAN .)
    )               reduce using rule 15 (expression -> BOOLEAN .)


state 17

    (17) expression -> ( . expression )
    (9) expression -> . STRING + STRING
    (10) expression -> . expression ADD_OP expression
    (11) expression -> . expression MUL_OP expression
    (12) expression -> . expression COMP_OP expression
    (13) expression -> . NUMBER
    (14) expression -> . IDENTIFIER
    (15) expression -> . BOOLEAN
    (16) expression -> . STRING
    (17) expression -> . ( expression )
    (18) expression -> . ADD_OP expression

    STRING          shift and go to state 12
    NUMBER          shift and go to state 14
    IDENTIFIER      shift and go to state 15
    BOOLEAN         shift and go to state 16
    (               shift and go to state 17
    ADD_OP          shift and go to state 13

    expression                     shift and go to state 27

state 18

    (7) structure -> WHILE expression . { programme }
    (10) expression -> expression . ADD_OP expression
    (11) expression -> expression . MUL_OP expression
    (12) expression -> expression . COMP_OP expression

    {               shift and go to state 28
    ADD_OP          shift and go to state 22
    MUL_OP          shift and go to state 23
    COMP_OP         shift and go to state 24


state 19

    (8) structure -> IF expression . { programme }
    (10) expression -> expression . ADD_OP expression
    (11) expression -> expression . MUL_OP expression
    (12) expression -> expression . COMP_OP expression

    {               shift and go to state 29
    ADD_OP          shift and go to state 22
    MUL_OP          shift and go to state 23
    COMP_OP         shift and go to state 24


state 20

    (19) assignation -> IDENTIFIER = . expression
    (9) expression -> . STRING + STRING
    (10) expression -> . expression ADD_OP expression
    (11) expression -> . expression MUL_OP expression
    (12) expression -> . expression COMP_OP expression
    (13) expression -> . NUMBER
    (14) expression -> . IDENTIFIER
    (15) expression -> . BOOLEAN
    (16) expression -> . STRING
    (17) expression -> . ( expression )
    (18) expression -> . ADD_OP expression

    STRING          shift and go to state 12
    NUMBER          shift and go to state 14
    IDENTIFIER      shift and go to state 15
    BOOLEAN         shift and go to state 16
    (               shift and go to state 17
    ADD_OP          shift and go to state 13

    expression                     shift and go to state 30

state 21

    (1) programme -> statement ; programme .

    $end            reduce using rule 1 (programme -> statement ; programme .)
    }               reduce using rule 1 (programme -> statement ; programme .)


state 22

    (10) expression -> expression ADD_OP . expression
    (9) expression -> . STRING + STRING
    (10) expression -> . expression ADD_OP expression
    (11) expression -> . expression MUL_OP expression
    (12) expression -> . expression COMP_OP expression
    (13) expression -> . NUMBER
    (14) expression -> . IDENTIFIER
    (15) expression -> . BOOLEAN
    (16) expression -> . STRING
    (17) expression -> . ( expression )
    (18) expression -> . ADD_OP expression

    STRING          shift and go to state 12
    NUMBER          shift and go to state 14
    IDENTIFIER      shift and go to state 15
    BOOLEAN         shift and go to state 16
    (               shift and go to state 17
    ADD_OP          shift and go to state 13

    expression                     shift and go to state 31

state 23

    (11) expression -> expression MUL_OP . expression
    (9) expression -> . STRING + STRING
    (10) expression -> . expression ADD_OP expression
    (11) expression -> . expression MUL_OP expression
    (12) expression -> . expression COMP_OP expression
    (13) expression -> . NUMBER
    (14) expression -> . IDENTIFIER
    (15) expression -> . BOOLEAN
    (16) expression -> . STRING
    (17) expression -> . ( expression )
    (18) expression -> . ADD_OP expression

    STRING          shift and go to state 12
    NUMBER          shift and go to state 14
    IDENTIFIER      shift and go to state 15
    BOOLEAN         shift and go to state 16
    (               shift and go to state 17
    ADD_OP          shift and go to state 13

    expression                     shift and go to state 32

state 24

    (12) expression -> expression COMP_OP . expression
    (9) expression -> . STRING + STRING
    (10) expression -> . expression ADD_OP expression
    (11) expression -> . expression MUL_OP expression
    (12) expression -> . expression COMP_OP expression
    (13) expression -> . NUMBER
    (14) expression -> . IDENTIFIER
    (15) expression -> . BOOLEAN
    (16) expression -> . STRING
    (17) expression -> . ( expression )
    (18) expression -> . ADD_OP expression

    STRING          shift and go to state 12
    NUMBER          shift and go to state 14
    IDENTIFIER      shift and go to state 15
    BOOLEAN         shift and go to state 16
    (               shift and go to state 17
    ADD_OP          shift and go to state 13

    expression                     shift and go to state 33

state 25

    (9) expression -> STRING + . STRING

    STRING          shift and go to state 34


state 26

    (18) expression -> ADD_OP expression .
    (10) expression -> expression . ADD_OP expression
    (11) expression -> expression . MUL_OP expression
    (12) expression -> expression . COMP_OP expression

    ADD_OP          reduce using rule 18 (expression -> ADD_OP expression .)
    MUL_OP          reduce using rule 18 (expression -> ADD_OP expression .)
    COMP_OP         reduce using rule 18 (expression -> ADD_OP expression .)
    ;               reduce using rule 18 (expression -> ADD_OP expression .)
    {               reduce using rule 18 (expression -> ADD_OP expression .)
    )               reduce using rule 18 (expression -> ADD_OP expression .)

  ! ADD_OP          [ shift and go to state 22 ]
  ! MUL_OP          [ shift and go to state 23 ]
  ! COMP_OP         [ shift and go to state 24 ]


state 27

    (17) expression -> ( expression . )
    (10) expression -> expression . ADD_OP expression
    (11) expression -> expression . MUL_OP expression
    (12) expression -> expression . COMP_OP expression

    )               shift and go to state 35
    ADD_OP          shift and go to state 22
    MUL_OP          shift and go to state 23
    COMP_OP         shift and go to state 24


state 28

    (7) structure -> WHILE expression { . programme }
    (1) programme -> . statement ; programme
    (2) programme -> . structure programme
    (3) programme -> . statement ;
    (4) programme -> . structure
    (5) statement -> . assignation
    (6) statement -> . PRINT expression
    (7) structure -> . WHILE expression { programme }
    (8) structure -> . IF expression { programme }
    (19) assignation -> . IDENTIFIER = expression

    PRINT           shift and go to state 5
    WHILE           shift and go to state 6
    IF              shift and go to state 7
    IDENTIFIER      shift and go to state 8

    programme                      shift and go to state 36
    statement                      shift and go to state 2
    structure                      shift and go to state 3
    assignation                    shift and go to state 4

state 29

    (8) structure -> IF expression { . programme }
    (1) programme -> . statement ; programme
    (2) programme -> . structure programme
    (3) programme -> . statement ;
    (4) programme -> . structure
    (5) statement -> . assignation
    (6) statement -> . PRINT expression
    (7) structure -> . WHILE expression { programme }
    (8) structure -> . IF expression { programme }
    (19) assignation -> . IDENTIFIER = expression

    PRINT           shift and go to state 5
    WHILE           shift and go to state 6
    IF              shift and go to state 7
    IDENTIFIER      shift and go to state 8

    programme                      shift and go to state 37
    statement                      shift and go to state 2
    structure                      shift and go to state 3
    assignation                    shift and go to state 4

state 30

    (19) assignation -> IDENTIFIER = expression .
    (10) expression -> expression . ADD_OP expression
    (11) expression -> expression . MUL_OP expression
    (12) expression -> expression . COMP_OP expression

    ;               reduce using rule 19 (assignation -> IDENTIFIER = expression .)
    ADD_OP          shift and go to state 22
    MUL_OP          shift and go to state 23
    COMP_OP         shift and go to state 24


state 31

    (10) expression -> expression ADD_OP expression .
    (10) expression -> expression . ADD_OP expression
    (11) expression -> expression . MUL_OP expression
    (12) expression -> expression . COMP_OP expression

    ADD_OP          reduce using rule 10 (expression -> expression ADD_OP expression .)
    ;               reduce using rule 10 (expression -> expression ADD_OP expression .)
    {               reduce using rule 10 (expression -> expression ADD_OP expression .)
    )               reduce using rule 10 (expression -> expression ADD_OP expression .)
    MUL_OP          shift and go to state 23
    COMP_OP         shift and go to state 24

  ! MUL_OP          [ reduce using rule 10 (expression -> expression ADD_OP expression .) ]
  ! COMP_OP         [ reduce using rule 10 (expression -> expression ADD_OP expression .) ]
  ! ADD_OP          [ shift and go to state 22 ]


state 32

    (11) expression -> expression MUL_OP expression .
    (10) expression -> expression . ADD_OP expression
    (11) expression -> expression . MUL_OP expression
    (12) expression -> expression . COMP_OP expression

    ADD_OP          reduce using rule 11 (expression -> expression MUL_OP expression .)
    MUL_OP          reduce using rule 11 (expression -> expression MUL_OP expression .)
    ;               reduce using rule 11 (expression -> expression MUL_OP expression .)
    {               reduce using rule 11 (expression -> expression MUL_OP expression .)
    )               reduce using rule 11 (expression -> expression MUL_OP expression .)
    COMP_OP         shift and go to state 24

  ! COMP_OP         [ reduce using rule 11 (expression -> expression MUL_OP expression .) ]
  ! ADD_OP          [ shift and go to state 22 ]
  ! MUL_OP          [ shift and go to state 23 ]


state 33

    (12) expression -> expression COMP_OP expression .
    (10) expression -> expression . ADD_OP expression
    (11) expression -> expression . MUL_OP expression
    (12) expression -> expression . COMP_OP expression

    ADD_OP          reduce using rule 12 (expression -> expression COMP_OP expression .)
    MUL_OP          reduce using rule 12 (expression -> expression COMP_OP expression .)
    COMP_OP         reduce using rule 12 (expression -> expression COMP_OP expression .)
    ;               reduce using rule 12 (expression -> expression COMP_OP expression .)
    {               reduce using rule 12 (expression -> expression COMP_OP expression .)
    )               reduce using rule 12 (expression -> expression COMP_OP expression .)

  ! ADD_OP          [ shift and go to state 22 ]
  ! MUL_OP          [ shift and go to state 23 ]
  ! COMP_OP         [ shift and go to state 24 ]


state 34

    (9) expression -> STRING + STRING .

    ADD_OP          reduce using rule 9 (expression -> STRING + STRING .)
    MUL_OP          reduce using rule 9 (expression -> STRING + STRING .)
    COMP_OP         reduce using rule 9 (expression -> STRING + STRING .)
    ;               reduce using rule 9 (expression -> STRING + STRING .)
    {               reduce using rule 9 (expression -> STRING + STRING .)
    )               reduce using rule 9 (expression -> STRING + STRING .)


state 35

    (17) expression -> ( expression ) .

    ADD_OP          reduce using rule 17 (expression -> ( expression ) .)
    MUL_OP          reduce using rule 17 (expression -> ( expression ) .)
    COMP_OP         reduce using rule 17 (expression -> ( expression ) .)
    ;               reduce using rule 17 (expression -> ( expression ) .)
    {               reduce using rule 17 (expression -> ( expression ) .)
    )               reduce using rule 17 (expression -> ( expression ) .)


state 36

    (7) structure -> WHILE expression { programme . }

    }               shift and go to state 38


state 37

    (8) structure -> IF expression { programme . }

    }               shift and go to state 39


state 38

    (7) structure -> WHILE expression { programme } .

    PRINT           reduce using rule 7 (structure -> WHILE expression { programme } .)
    WHILE           reduce using rule 7 (structure -> WHILE expression { programme } .)
    IF              reduce using rule 7 (structure -> WHILE expression { programme } .)
    IDENTIFIER      reduce using rule 7 (structure -> WHILE expression { programme } .)
    $end            reduce using rule 7 (structure -> WHILE expression { programme } .)
    }               reduce using rule 7 (structure -> WHILE expression { programme } .)


state 39

    (8) structure -> IF expression { programme } .

    PRINT           reduce using rule 8 (structure -> IF expression { programme } .)
    WHILE           reduce using rule 8 (structure -> IF expression { programme } .)
    IF              reduce using rule 8 (structure -> IF expression { programme } .)
    IDENTIFIER      reduce using rule 8 (structure -> IF expression { programme } .)
    $end            reduce using rule 8 (structure -> IF expression { programme } .)
    }               reduce using rule 8 (structure -> IF expression { programme } .)

