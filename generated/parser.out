Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> newprogram
Rule 1     newprogram -> func newprogram
Rule 2     newprogram -> func
Rule 3     func -> FUN IDENTIFIER ( ) { programme }
Rule 4     programme -> statement ; programme
Rule 5     programme -> structure programme
Rule 6     programme -> statement ;
Rule 7     programme -> statement
Rule 8     statement -> assignation
Rule 9     statement -> structure
Rule 10    statement -> PRINT expression
Rule 11    structure -> WHILE expression { programme }
Rule 12    structure -> IF expression { programme }
Rule 13    expression -> STRING + STRING
Rule 14    expression -> expression ADD_OP expression
Rule 15    expression -> expression MUL_OP expression
Rule 16    expression -> expression COMP_OP expression
Rule 17    expression -> NUMBER
Rule 18    expression -> IDENTIFIER
Rule 19    expression -> BOOLEAN
Rule 20    expression -> STRING
Rule 21    expression -> ( expression )
Rule 22    expression -> ADD_OP expression
Rule 23    assignation -> IDENTIFIER = expression

Terminals, with rules where they appear

(                    : 3 21
)                    : 3 21
+                    : 13
;                    : 4 6
=                    : 23
ADD_OP               : 14 22
BOOLEAN              : 19
COMP_OP              : 16
FUN                  : 3
IDENTIFIER           : 3 18 23
IF                   : 12
MUL_OP               : 15
NUMBER               : 17
PRINT                : 10
STRING               : 13 13 20
WHILE                : 11
error                : 
{                    : 3 11 12
}                    : 3 11 12

Nonterminals, with rules where they appear

assignation          : 8
expression           : 10 11 12 14 14 15 15 16 16 21 22 23
func                 : 1 2
newprogram           : 1 0
programme            : 3 4 5 11 12
statement            : 4 6 7
structure            : 5 9

Parsing method: LALR

state 0

    (0) S' -> . newprogram
    (1) newprogram -> . func newprogram
    (2) newprogram -> . func
    (3) func -> . FUN IDENTIFIER ( ) { programme }

    FUN             shift and go to state 3

    newprogram                     shift and go to state 1
    func                           shift and go to state 2

state 1

    (0) S' -> newprogram .



state 2

    (1) newprogram -> func . newprogram
    (2) newprogram -> func .
    (1) newprogram -> . func newprogram
    (2) newprogram -> . func
    (3) func -> . FUN IDENTIFIER ( ) { programme }

    $end            reduce using rule 2 (newprogram -> func .)
    FUN             shift and go to state 3

    func                           shift and go to state 2
    newprogram                     shift and go to state 4

state 3

    (3) func -> FUN . IDENTIFIER ( ) { programme }

    IDENTIFIER      shift and go to state 5


state 4

    (1) newprogram -> func newprogram .

    $end            reduce using rule 1 (newprogram -> func newprogram .)


state 5

    (3) func -> FUN IDENTIFIER . ( ) { programme }

    (               shift and go to state 6


state 6

    (3) func -> FUN IDENTIFIER ( . ) { programme }

    )               shift and go to state 7


state 7

    (3) func -> FUN IDENTIFIER ( ) . { programme }

    {               shift and go to state 8


state 8

    (3) func -> FUN IDENTIFIER ( ) { . programme }
    (4) programme -> . statement ; programme
    (5) programme -> . structure programme
    (6) programme -> . statement ;
    (7) programme -> . statement
    (8) statement -> . assignation
    (9) statement -> . structure
    (10) statement -> . PRINT expression
    (11) structure -> . WHILE expression { programme }
    (12) structure -> . IF expression { programme }
    (23) assignation -> . IDENTIFIER = expression

    PRINT           shift and go to state 14
    WHILE           shift and go to state 15
    IF              shift and go to state 16
    IDENTIFIER      shift and go to state 9

    programme                      shift and go to state 10
    statement                      shift and go to state 11
    structure                      shift and go to state 12
    assignation                    shift and go to state 13

state 9

    (23) assignation -> IDENTIFIER . = expression

    =               shift and go to state 17


state 10

    (3) func -> FUN IDENTIFIER ( ) { programme . }

    }               shift and go to state 18


state 11

    (4) programme -> statement . ; programme
    (6) programme -> statement . ;
    (7) programme -> statement .

    ;               shift and go to state 19
    }               reduce using rule 7 (programme -> statement .)


state 12

    (5) programme -> structure . programme
    (9) statement -> structure .
    (4) programme -> . statement ; programme
    (5) programme -> . structure programme
    (6) programme -> . statement ;
    (7) programme -> . statement
    (8) statement -> . assignation
    (9) statement -> . structure
    (10) statement -> . PRINT expression
    (11) structure -> . WHILE expression { programme }
    (12) structure -> . IF expression { programme }
    (23) assignation -> . IDENTIFIER = expression

    ;               reduce using rule 9 (statement -> structure .)
    }               reduce using rule 9 (statement -> structure .)
    PRINT           shift and go to state 14
    WHILE           shift and go to state 15
    IF              shift and go to state 16
    IDENTIFIER      shift and go to state 9

    structure                      shift and go to state 12
    programme                      shift and go to state 20
    statement                      shift and go to state 11
    assignation                    shift and go to state 13

state 13

    (8) statement -> assignation .

    ;               reduce using rule 8 (statement -> assignation .)
    }               reduce using rule 8 (statement -> assignation .)


state 14

    (10) statement -> PRINT . expression
    (13) expression -> . STRING + STRING
    (14) expression -> . expression ADD_OP expression
    (15) expression -> . expression MUL_OP expression
    (16) expression -> . expression COMP_OP expression
    (17) expression -> . NUMBER
    (18) expression -> . IDENTIFIER
    (19) expression -> . BOOLEAN
    (20) expression -> . STRING
    (21) expression -> . ( expression )
    (22) expression -> . ADD_OP expression

    STRING          shift and go to state 22
    NUMBER          shift and go to state 24
    IDENTIFIER      shift and go to state 25
    BOOLEAN         shift and go to state 26
    (               shift and go to state 27
    ADD_OP          shift and go to state 23

    expression                     shift and go to state 21

state 15

    (11) structure -> WHILE . expression { programme }
    (13) expression -> . STRING + STRING
    (14) expression -> . expression ADD_OP expression
    (15) expression -> . expression MUL_OP expression
    (16) expression -> . expression COMP_OP expression
    (17) expression -> . NUMBER
    (18) expression -> . IDENTIFIER
    (19) expression -> . BOOLEAN
    (20) expression -> . STRING
    (21) expression -> . ( expression )
    (22) expression -> . ADD_OP expression

    STRING          shift and go to state 22
    NUMBER          shift and go to state 24
    IDENTIFIER      shift and go to state 25
    BOOLEAN         shift and go to state 26
    (               shift and go to state 27
    ADD_OP          shift and go to state 23

    expression                     shift and go to state 28

state 16

    (12) structure -> IF . expression { programme }
    (13) expression -> . STRING + STRING
    (14) expression -> . expression ADD_OP expression
    (15) expression -> . expression MUL_OP expression
    (16) expression -> . expression COMP_OP expression
    (17) expression -> . NUMBER
    (18) expression -> . IDENTIFIER
    (19) expression -> . BOOLEAN
    (20) expression -> . STRING
    (21) expression -> . ( expression )
    (22) expression -> . ADD_OP expression

    STRING          shift and go to state 22
    NUMBER          shift and go to state 24
    IDENTIFIER      shift and go to state 25
    BOOLEAN         shift and go to state 26
    (               shift and go to state 27
    ADD_OP          shift and go to state 23

    expression                     shift and go to state 29

state 17

    (23) assignation -> IDENTIFIER = . expression
    (13) expression -> . STRING + STRING
    (14) expression -> . expression ADD_OP expression
    (15) expression -> . expression MUL_OP expression
    (16) expression -> . expression COMP_OP expression
    (17) expression -> . NUMBER
    (18) expression -> . IDENTIFIER
    (19) expression -> . BOOLEAN
    (20) expression -> . STRING
    (21) expression -> . ( expression )
    (22) expression -> . ADD_OP expression

    STRING          shift and go to state 22
    NUMBER          shift and go to state 24
    IDENTIFIER      shift and go to state 25
    BOOLEAN         shift and go to state 26
    (               shift and go to state 27
    ADD_OP          shift and go to state 23

    expression                     shift and go to state 30

state 18

    (3) func -> FUN IDENTIFIER ( ) { programme } .

    FUN             reduce using rule 3 (func -> FUN IDENTIFIER ( ) { programme } .)
    $end            reduce using rule 3 (func -> FUN IDENTIFIER ( ) { programme } .)


state 19

    (4) programme -> statement ; . programme
    (6) programme -> statement ; .
    (4) programme -> . statement ; programme
    (5) programme -> . structure programme
    (6) programme -> . statement ;
    (7) programme -> . statement
    (8) statement -> . assignation
    (9) statement -> . structure
    (10) statement -> . PRINT expression
    (11) structure -> . WHILE expression { programme }
    (12) structure -> . IF expression { programme }
    (23) assignation -> . IDENTIFIER = expression

    }               reduce using rule 6 (programme -> statement ; .)
    PRINT           shift and go to state 14
    WHILE           shift and go to state 15
    IF              shift and go to state 16
    IDENTIFIER      shift and go to state 9

    statement                      shift and go to state 11
    programme                      shift and go to state 31
    structure                      shift and go to state 12
    assignation                    shift and go to state 13

state 20

    (5) programme -> structure programme .

    }               reduce using rule 5 (programme -> structure programme .)


state 21

    (10) statement -> PRINT expression .
    (14) expression -> expression . ADD_OP expression
    (15) expression -> expression . MUL_OP expression
    (16) expression -> expression . COMP_OP expression

    ;               reduce using rule 10 (statement -> PRINT expression .)
    }               reduce using rule 10 (statement -> PRINT expression .)
    ADD_OP          shift and go to state 32
    MUL_OP          shift and go to state 33
    COMP_OP         shift and go to state 34


state 22

    (13) expression -> STRING . + STRING
    (20) expression -> STRING .

    +               shift and go to state 35
    ADD_OP          reduce using rule 20 (expression -> STRING .)
    MUL_OP          reduce using rule 20 (expression -> STRING .)
    COMP_OP         reduce using rule 20 (expression -> STRING .)
    ;               reduce using rule 20 (expression -> STRING .)
    }               reduce using rule 20 (expression -> STRING .)
    {               reduce using rule 20 (expression -> STRING .)
    )               reduce using rule 20 (expression -> STRING .)


state 23

    (22) expression -> ADD_OP . expression
    (13) expression -> . STRING + STRING
    (14) expression -> . expression ADD_OP expression
    (15) expression -> . expression MUL_OP expression
    (16) expression -> . expression COMP_OP expression
    (17) expression -> . NUMBER
    (18) expression -> . IDENTIFIER
    (19) expression -> . BOOLEAN
    (20) expression -> . STRING
    (21) expression -> . ( expression )
    (22) expression -> . ADD_OP expression

    STRING          shift and go to state 22
    NUMBER          shift and go to state 24
    IDENTIFIER      shift and go to state 25
    BOOLEAN         shift and go to state 26
    (               shift and go to state 27
    ADD_OP          shift and go to state 23

    expression                     shift and go to state 36

state 24

    (17) expression -> NUMBER .

    ADD_OP          reduce using rule 17 (expression -> NUMBER .)
    MUL_OP          reduce using rule 17 (expression -> NUMBER .)
    COMP_OP         reduce using rule 17 (expression -> NUMBER .)
    ;               reduce using rule 17 (expression -> NUMBER .)
    }               reduce using rule 17 (expression -> NUMBER .)
    {               reduce using rule 17 (expression -> NUMBER .)
    )               reduce using rule 17 (expression -> NUMBER .)


state 25

    (18) expression -> IDENTIFIER .

    ADD_OP          reduce using rule 18 (expression -> IDENTIFIER .)
    MUL_OP          reduce using rule 18 (expression -> IDENTIFIER .)
    COMP_OP         reduce using rule 18 (expression -> IDENTIFIER .)
    ;               reduce using rule 18 (expression -> IDENTIFIER .)
    }               reduce using rule 18 (expression -> IDENTIFIER .)
    {               reduce using rule 18 (expression -> IDENTIFIER .)
    )               reduce using rule 18 (expression -> IDENTIFIER .)


state 26

    (19) expression -> BOOLEAN .

    ADD_OP          reduce using rule 19 (expression -> BOOLEAN .)
    MUL_OP          reduce using rule 19 (expression -> BOOLEAN .)
    COMP_OP         reduce using rule 19 (expression -> BOOLEAN .)
    ;               reduce using rule 19 (expression -> BOOLEAN .)
    }               reduce using rule 19 (expression -> BOOLEAN .)
    {               reduce using rule 19 (expression -> BOOLEAN .)
    )               reduce using rule 19 (expression -> BOOLEAN .)


state 27

    (21) expression -> ( . expression )
    (13) expression -> . STRING + STRING
    (14) expression -> . expression ADD_OP expression
    (15) expression -> . expression MUL_OP expression
    (16) expression -> . expression COMP_OP expression
    (17) expression -> . NUMBER
    (18) expression -> . IDENTIFIER
    (19) expression -> . BOOLEAN
    (20) expression -> . STRING
    (21) expression -> . ( expression )
    (22) expression -> . ADD_OP expression

    STRING          shift and go to state 22
    NUMBER          shift and go to state 24
    IDENTIFIER      shift and go to state 25
    BOOLEAN         shift and go to state 26
    (               shift and go to state 27
    ADD_OP          shift and go to state 23

    expression                     shift and go to state 37

state 28

    (11) structure -> WHILE expression . { programme }
    (14) expression -> expression . ADD_OP expression
    (15) expression -> expression . MUL_OP expression
    (16) expression -> expression . COMP_OP expression

    {               shift and go to state 38
    ADD_OP          shift and go to state 32
    MUL_OP          shift and go to state 33
    COMP_OP         shift and go to state 34


state 29

    (12) structure -> IF expression . { programme }
    (14) expression -> expression . ADD_OP expression
    (15) expression -> expression . MUL_OP expression
    (16) expression -> expression . COMP_OP expression

    {               shift and go to state 39
    ADD_OP          shift and go to state 32
    MUL_OP          shift and go to state 33
    COMP_OP         shift and go to state 34


state 30

    (23) assignation -> IDENTIFIER = expression .
    (14) expression -> expression . ADD_OP expression
    (15) expression -> expression . MUL_OP expression
    (16) expression -> expression . COMP_OP expression

    ;               reduce using rule 23 (assignation -> IDENTIFIER = expression .)
    }               reduce using rule 23 (assignation -> IDENTIFIER = expression .)
    ADD_OP          shift and go to state 32
    MUL_OP          shift and go to state 33
    COMP_OP         shift and go to state 34


state 31

    (4) programme -> statement ; programme .

    }               reduce using rule 4 (programme -> statement ; programme .)


state 32

    (14) expression -> expression ADD_OP . expression
    (13) expression -> . STRING + STRING
    (14) expression -> . expression ADD_OP expression
    (15) expression -> . expression MUL_OP expression
    (16) expression -> . expression COMP_OP expression
    (17) expression -> . NUMBER
    (18) expression -> . IDENTIFIER
    (19) expression -> . BOOLEAN
    (20) expression -> . STRING
    (21) expression -> . ( expression )
    (22) expression -> . ADD_OP expression

    STRING          shift and go to state 22
    NUMBER          shift and go to state 24
    IDENTIFIER      shift and go to state 25
    BOOLEAN         shift and go to state 26
    (               shift and go to state 27
    ADD_OP          shift and go to state 23

    expression                     shift and go to state 40

state 33

    (15) expression -> expression MUL_OP . expression
    (13) expression -> . STRING + STRING
    (14) expression -> . expression ADD_OP expression
    (15) expression -> . expression MUL_OP expression
    (16) expression -> . expression COMP_OP expression
    (17) expression -> . NUMBER
    (18) expression -> . IDENTIFIER
    (19) expression -> . BOOLEAN
    (20) expression -> . STRING
    (21) expression -> . ( expression )
    (22) expression -> . ADD_OP expression

    STRING          shift and go to state 22
    NUMBER          shift and go to state 24
    IDENTIFIER      shift and go to state 25
    BOOLEAN         shift and go to state 26
    (               shift and go to state 27
    ADD_OP          shift and go to state 23

    expression                     shift and go to state 41

state 34

    (16) expression -> expression COMP_OP . expression
    (13) expression -> . STRING + STRING
    (14) expression -> . expression ADD_OP expression
    (15) expression -> . expression MUL_OP expression
    (16) expression -> . expression COMP_OP expression
    (17) expression -> . NUMBER
    (18) expression -> . IDENTIFIER
    (19) expression -> . BOOLEAN
    (20) expression -> . STRING
    (21) expression -> . ( expression )
    (22) expression -> . ADD_OP expression

    STRING          shift and go to state 22
    NUMBER          shift and go to state 24
    IDENTIFIER      shift and go to state 25
    BOOLEAN         shift and go to state 26
    (               shift and go to state 27
    ADD_OP          shift and go to state 23

    expression                     shift and go to state 42

state 35

    (13) expression -> STRING + . STRING

    STRING          shift and go to state 43


state 36

    (22) expression -> ADD_OP expression .
    (14) expression -> expression . ADD_OP expression
    (15) expression -> expression . MUL_OP expression
    (16) expression -> expression . COMP_OP expression

    ADD_OP          reduce using rule 22 (expression -> ADD_OP expression .)
    MUL_OP          reduce using rule 22 (expression -> ADD_OP expression .)
    COMP_OP         reduce using rule 22 (expression -> ADD_OP expression .)
    ;               reduce using rule 22 (expression -> ADD_OP expression .)
    }               reduce using rule 22 (expression -> ADD_OP expression .)
    {               reduce using rule 22 (expression -> ADD_OP expression .)
    )               reduce using rule 22 (expression -> ADD_OP expression .)

  ! ADD_OP          [ shift and go to state 32 ]
  ! MUL_OP          [ shift and go to state 33 ]
  ! COMP_OP         [ shift and go to state 34 ]


state 37

    (21) expression -> ( expression . )
    (14) expression -> expression . ADD_OP expression
    (15) expression -> expression . MUL_OP expression
    (16) expression -> expression . COMP_OP expression

    )               shift and go to state 44
    ADD_OP          shift and go to state 32
    MUL_OP          shift and go to state 33
    COMP_OP         shift and go to state 34


state 38

    (11) structure -> WHILE expression { . programme }
    (4) programme -> . statement ; programme
    (5) programme -> . structure programme
    (6) programme -> . statement ;
    (7) programme -> . statement
    (8) statement -> . assignation
    (9) statement -> . structure
    (10) statement -> . PRINT expression
    (11) structure -> . WHILE expression { programme }
    (12) structure -> . IF expression { programme }
    (23) assignation -> . IDENTIFIER = expression

    PRINT           shift and go to state 14
    WHILE           shift and go to state 15
    IF              shift and go to state 16
    IDENTIFIER      shift and go to state 9

    programme                      shift and go to state 45
    statement                      shift and go to state 11
    structure                      shift and go to state 12
    assignation                    shift and go to state 13

state 39

    (12) structure -> IF expression { . programme }
    (4) programme -> . statement ; programme
    (5) programme -> . structure programme
    (6) programme -> . statement ;
    (7) programme -> . statement
    (8) statement -> . assignation
    (9) statement -> . structure
    (10) statement -> . PRINT expression
    (11) structure -> . WHILE expression { programme }
    (12) structure -> . IF expression { programme }
    (23) assignation -> . IDENTIFIER = expression

    PRINT           shift and go to state 14
    WHILE           shift and go to state 15
    IF              shift and go to state 16
    IDENTIFIER      shift and go to state 9

    programme                      shift and go to state 46
    statement                      shift and go to state 11
    structure                      shift and go to state 12
    assignation                    shift and go to state 13

state 40

    (14) expression -> expression ADD_OP expression .
    (14) expression -> expression . ADD_OP expression
    (15) expression -> expression . MUL_OP expression
    (16) expression -> expression . COMP_OP expression

    ADD_OP          reduce using rule 14 (expression -> expression ADD_OP expression .)
    COMP_OP         reduce using rule 14 (expression -> expression ADD_OP expression .)
    ;               reduce using rule 14 (expression -> expression ADD_OP expression .)
    }               reduce using rule 14 (expression -> expression ADD_OP expression .)
    {               reduce using rule 14 (expression -> expression ADD_OP expression .)
    )               reduce using rule 14 (expression -> expression ADD_OP expression .)
    MUL_OP          shift and go to state 33

  ! MUL_OP          [ reduce using rule 14 (expression -> expression ADD_OP expression .) ]
  ! ADD_OP          [ shift and go to state 32 ]
  ! COMP_OP         [ shift and go to state 34 ]


state 41

    (15) expression -> expression MUL_OP expression .
    (14) expression -> expression . ADD_OP expression
    (15) expression -> expression . MUL_OP expression
    (16) expression -> expression . COMP_OP expression

    ADD_OP          reduce using rule 15 (expression -> expression MUL_OP expression .)
    MUL_OP          reduce using rule 15 (expression -> expression MUL_OP expression .)
    COMP_OP         reduce using rule 15 (expression -> expression MUL_OP expression .)
    ;               reduce using rule 15 (expression -> expression MUL_OP expression .)
    }               reduce using rule 15 (expression -> expression MUL_OP expression .)
    {               reduce using rule 15 (expression -> expression MUL_OP expression .)
    )               reduce using rule 15 (expression -> expression MUL_OP expression .)

  ! ADD_OP          [ shift and go to state 32 ]
  ! MUL_OP          [ shift and go to state 33 ]
  ! COMP_OP         [ shift and go to state 34 ]


state 42

    (16) expression -> expression COMP_OP expression .
    (14) expression -> expression . ADD_OP expression
    (15) expression -> expression . MUL_OP expression
    (16) expression -> expression . COMP_OP expression

  ! shift/reduce conflict for ADD_OP resolved as shift
  ! shift/reduce conflict for MUL_OP resolved as shift
  ! shift/reduce conflict for COMP_OP resolved as shift
    ;               reduce using rule 16 (expression -> expression COMP_OP expression .)
    }               reduce using rule 16 (expression -> expression COMP_OP expression .)
    {               reduce using rule 16 (expression -> expression COMP_OP expression .)
    )               reduce using rule 16 (expression -> expression COMP_OP expression .)
    ADD_OP          shift and go to state 32
    MUL_OP          shift and go to state 33
    COMP_OP         shift and go to state 34

  ! ADD_OP          [ reduce using rule 16 (expression -> expression COMP_OP expression .) ]
  ! MUL_OP          [ reduce using rule 16 (expression -> expression COMP_OP expression .) ]
  ! COMP_OP         [ reduce using rule 16 (expression -> expression COMP_OP expression .) ]


state 43

    (13) expression -> STRING + STRING .

    ADD_OP          reduce using rule 13 (expression -> STRING + STRING .)
    MUL_OP          reduce using rule 13 (expression -> STRING + STRING .)
    COMP_OP         reduce using rule 13 (expression -> STRING + STRING .)
    ;               reduce using rule 13 (expression -> STRING + STRING .)
    }               reduce using rule 13 (expression -> STRING + STRING .)
    {               reduce using rule 13 (expression -> STRING + STRING .)
    )               reduce using rule 13 (expression -> STRING + STRING .)


state 44

    (21) expression -> ( expression ) .

    ADD_OP          reduce using rule 21 (expression -> ( expression ) .)
    MUL_OP          reduce using rule 21 (expression -> ( expression ) .)
    COMP_OP         reduce using rule 21 (expression -> ( expression ) .)
    ;               reduce using rule 21 (expression -> ( expression ) .)
    }               reduce using rule 21 (expression -> ( expression ) .)
    {               reduce using rule 21 (expression -> ( expression ) .)
    )               reduce using rule 21 (expression -> ( expression ) .)


state 45

    (11) structure -> WHILE expression { programme . }

    }               shift and go to state 47


state 46

    (12) structure -> IF expression { programme . }

    }               shift and go to state 48


state 47

    (11) structure -> WHILE expression { programme } .

    PRINT           reduce using rule 11 (structure -> WHILE expression { programme } .)
    WHILE           reduce using rule 11 (structure -> WHILE expression { programme } .)
    IF              reduce using rule 11 (structure -> WHILE expression { programme } .)
    IDENTIFIER      reduce using rule 11 (structure -> WHILE expression { programme } .)
    ;               reduce using rule 11 (structure -> WHILE expression { programme } .)
    }               reduce using rule 11 (structure -> WHILE expression { programme } .)


state 48

    (12) structure -> IF expression { programme } .

    PRINT           reduce using rule 12 (structure -> IF expression { programme } .)
    WHILE           reduce using rule 12 (structure -> IF expression { programme } .)
    IF              reduce using rule 12 (structure -> IF expression { programme } .)
    IDENTIFIER      reduce using rule 12 (structure -> IF expression { programme } .)
    ;               reduce using rule 12 (structure -> IF expression { programme } .)
    }               reduce using rule 12 (structure -> IF expression { programme } .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ADD_OP in state 42 resolved as shift
WARNING: shift/reduce conflict for MUL_OP in state 42 resolved as shift
WARNING: shift/reduce conflict for COMP_OP in state 42 resolved as shift
