
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "leftADD_OPleftMUL_OPrightUMINUSADD_OP IDENTIFIER MUL_OP NUMBER PRINT STRING WHILE programme : statement  programme : statement ';' programme \n    | statement ';'  statement : assignation\n        | structure  statement : PRINT expression  structure : WHILE expression '{' programme '}' expression : expression ADD_OP expression\n            | expression MUL_OP expressionexpression : NUMBER\n        | IDENTIFIER expression : '(' expression ')'  expression : STRING  expression : ADD_OP expression %prec UMINUS assignation : IDENTIFIER '=' expression "
    
_lr_action_items = {'PRINT':([0,8,23,],[5,5,5,]),'IDENTIFIER':([0,5,7,8,10,13,15,18,19,23,],[6,12,12,6,12,12,12,12,12,6,]),'WHILE':([0,8,23,],[7,7,7,]),'$end':([1,2,3,4,8,9,11,12,14,17,20,22,24,25,26,28,],[0,-1,-4,-5,-3,-6,-10,-11,-13,-2,-14,-15,-8,-9,-12,-7,]),'}':([2,3,4,8,9,11,12,14,17,20,22,24,25,26,27,28,],[-1,-4,-5,-3,-6,-10,-11,-13,-2,-14,-15,-8,-9,-12,28,-7,]),';':([2,3,4,9,11,12,14,20,22,24,25,26,28,],[8,-4,-5,-6,-10,-11,-13,-14,-15,-8,-9,-12,-7,]),'NUMBER':([5,7,10,13,15,18,19,],[11,11,11,11,11,11,11,]),'(':([5,7,10,13,15,18,19,],[13,13,13,13,13,13,13,]),'STRING':([5,7,10,13,15,18,19,],[14,14,14,14,14,14,14,]),'ADD_OP':([5,7,9,10,11,12,13,14,15,16,18,19,20,21,22,24,25,26,],[10,10,18,10,-10,-11,10,-13,10,18,10,10,-14,18,18,-8,-9,-12,]),'=':([6,],[15,]),'MUL_OP':([9,11,12,14,16,20,21,22,24,25,26,],[19,-10,-11,-13,19,-14,19,19,19,-9,-12,]),'{':([11,12,14,16,20,24,25,26,],[-10,-11,-13,23,-14,-8,-9,-12,]),')':([11,12,14,20,21,24,25,26,],[-10,-11,-13,-14,26,-8,-9,-12,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programme':([0,8,23,],[1,17,27,]),'statement':([0,8,23,],[2,2,2,]),'assignation':([0,8,23,],[3,3,3,]),'structure':([0,8,23,],[4,4,4,]),'expression':([5,7,10,13,15,18,19,],[9,16,20,21,22,24,25,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programme","S'",1,None,None,None),
  ('programme -> statement','programme',1,'p_programme_statement','parser5.py',9),
  ('programme -> statement ; programme','programme',3,'p_programme_recursive','parser5.py',13),
  ('programme -> statement ;','programme',2,'p_programme_recursive','parser5.py',14),
  ('statement -> assignation','statement',1,'p_statement','parser5.py',20),
  ('statement -> structure','statement',1,'p_statement','parser5.py',21),
  ('statement -> PRINT expression','statement',2,'p_statement_print','parser5.py',25),
  ('structure -> WHILE expression { programme }','structure',5,'p_structure','parser5.py',29),
  ('expression -> expression ADD_OP expression','expression',3,'p_expression_op','parser5.py',33),
  ('expression -> expression MUL_OP expression','expression',3,'p_expression_op','parser5.py',34),
  ('expression -> NUMBER','expression',1,'p_expression_num_or_var','parser5.py',38),
  ('expression -> IDENTIFIER','expression',1,'p_expression_num_or_var','parser5.py',39),
  ('expression -> ( expression )','expression',3,'p_expression_paren','parser5.py',43),
  ('expression -> STRING','expression',1,'p_expression_string','parser5.py',47),
  ('expression -> ADD_OP expression','expression',2,'p_minus','parser5.py',51),
  ('assignation -> IDENTIFIER = expression','assignation',3,'p_assign','parser5.py',55),
]
