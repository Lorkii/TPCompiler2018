
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "leftADD_OPleftMUL_OPleftCOMP_OPrightUMINUSADD_OP BOOLEAN COMP_OP IDENTIFIER IF MUL_OP NUMBER PRINT STRING WHILE programme : statement ';' programme\n    | structure programme\n    | statement ';' \n    | structure statement : assignation statement : PRINT expression  structure : WHILE expression '{' programme '}'  structure : IF expression '{' programme '}' expression : STRING '+' STRINGexpression : expression ADD_OP expression\n    | expression MUL_OP expressionexpression : expression COMP_OP expressionexpression : NUMBER\n    | IDENTIFIER expression : BOOLEAN expression : STRING expression : '(' expression ')'  expression : ADD_OP expression %prec UMINUS assignation : IDENTIFIER '=' expression "
    
_lr_action_items = {'PRINT':([0,3,9,28,29,38,39,],[5,5,5,5,5,-7,-8,]),'WHILE':([0,3,9,28,29,38,39,],[6,6,6,6,6,-7,-8,]),'IF':([0,3,9,28,29,38,39,],[7,7,7,7,7,-7,-8,]),'IDENTIFIER':([0,3,5,6,7,9,13,17,20,22,23,24,28,29,38,39,],[8,8,15,15,15,8,15,15,15,15,15,15,8,8,-7,-8,]),'$end':([1,3,9,10,21,38,39,],[0,-4,-3,-2,-1,-7,-8,]),';':([2,4,11,12,14,15,16,26,30,31,32,33,34,35,],[9,-5,-6,-16,-13,-14,-15,-18,-19,-10,-11,-12,-9,-17,]),'}':([3,9,10,21,36,37,38,39,],[-4,-3,-2,-1,38,39,-7,-8,]),'STRING':([5,6,7,13,17,20,22,23,24,25,],[12,12,12,12,12,12,12,12,12,34,]),'NUMBER':([5,6,7,13,17,20,22,23,24,],[14,14,14,14,14,14,14,14,14,]),'BOOLEAN':([5,6,7,13,17,20,22,23,24,],[16,16,16,16,16,16,16,16,16,]),'(':([5,6,7,13,17,20,22,23,24,],[17,17,17,17,17,17,17,17,17,]),'ADD_OP':([5,6,7,11,12,13,14,15,16,17,18,19,20,22,23,24,26,27,30,31,32,33,34,35,],[13,13,13,22,-16,13,-13,-14,-15,13,22,22,13,13,13,13,-18,22,22,-10,-11,-12,-9,-17,]),'=':([8,],[20,]),'MUL_OP':([11,12,14,15,16,18,19,26,27,30,31,32,33,34,35,],[23,-16,-13,-14,-15,23,23,-18,23,23,23,-11,-12,-9,-17,]),'COMP_OP':([11,12,14,15,16,18,19,26,27,30,31,32,33,34,35,],[24,-16,-13,-14,-15,24,24,-18,24,24,24,24,-12,-9,-17,]),'+':([12,],[25,]),'{':([12,14,15,16,18,19,26,31,32,33,34,35,],[-16,-13,-14,-15,28,29,-18,-10,-11,-12,-9,-17,]),')':([12,14,15,16,26,27,31,32,33,34,35,],[-16,-13,-14,-15,-18,35,-10,-11,-12,-9,-17,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programme':([0,3,9,28,29,],[1,10,21,36,37,]),'statement':([0,3,9,28,29,],[2,2,2,2,2,]),'structure':([0,3,9,28,29,],[3,3,3,3,3,]),'assignation':([0,3,9,28,29,],[4,4,4,4,4,]),'expression':([5,6,7,13,17,20,22,23,24,],[11,18,19,26,27,30,31,32,33,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programme","S'",1,None,None,None),
  ('programme -> statement ; programme','programme',3,'p_programme_recursive','parser5.py',7),
  ('programme -> structure programme','programme',2,'p_programme_recursive','parser5.py',8),
  ('programme -> statement ;','programme',2,'p_programme_recursive','parser5.py',9),
  ('programme -> structure','programme',1,'p_programme_recursive','parser5.py',10),
  ('statement -> assignation','statement',1,'p_statement','parser5.py',20),
  ('statement -> PRINT expression','statement',2,'p_statement_print','parser5.py',24),
  ('structure -> WHILE expression { programme }','structure',5,'p_structure_while','parser5.py',28),
  ('structure -> IF expression { programme }','structure',5,'p_structure_if','parser5.py',32),
  ('expression -> STRING + STRING','expression',3,'p_expression_add_strings','parser5.py',36),
  ('expression -> expression ADD_OP expression','expression',3,'p_expression_op','parser5.py',41),
  ('expression -> expression MUL_OP expression','expression',3,'p_expression_op','parser5.py',42),
  ('expression -> expression COMP_OP expression','expression',3,'p_expression_comp','parser5.py',46),
  ('expression -> NUMBER','expression',1,'p_expression_num_or_var','parser5.py',50),
  ('expression -> IDENTIFIER','expression',1,'p_expression_num_or_var','parser5.py',51),
  ('expression -> BOOLEAN','expression',1,'p_expression_boolean','parser5.py',55),
  ('expression -> STRING','expression',1,'p_expression_string','parser5.py',59),
  ('expression -> ( expression )','expression',3,'p_expression_paren','parser5.py',63),
  ('expression -> ADD_OP expression','expression',2,'p_minus','parser5.py',67),
  ('assignation -> IDENTIFIER = expression','assignation',3,'p_assignation','parser5.py',71),
]
