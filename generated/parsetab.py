
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "leftADD_OPleftMUL_OPleftCOMP_OPrightUMINUSADD_OP BOOLEAN COMP_OP FUN GLOBAL IDENTIFIER IF MUL_OP NUMBER PRINT STRING WHILE programme : statement ';' programme\n    | structure programme\n    | statement ';' \n    | structure statement : assignation\n    | funcCallstructure : funcDec funcDec : FUN IDENTIFIER '(' ')' '{' programme '}'\n    funcCall : IDENTIFIER '(' ')'  statement : PRINT expression  structure : WHILE expression '{' programme '}'  structure : IF expression '{' programme '}' expression : STRING '+' STRINGexpression : expression ADD_OP expression\n    | expression MUL_OP expressionexpression : expression COMP_OP expressionexpression : NUMBER\n    | IDENTIFIER expression : BOOLEAN expression : STRING expression : '(' expression ')'  expression : ADD_OP expression %prec UMINUS assignation : IDENTIFIER '=' expression\n    | GLOBAL IDENTIFIER '=' expression  "
    
_lr_action_items = {'PRINT':([0,3,7,13,35,36,50,51,52,54,],[6,6,-7,6,6,6,-11,-12,6,-8,]),'WHILE':([0,3,7,13,35,36,50,51,52,54,],[8,8,-7,8,8,8,-11,-12,8,-8,]),'IF':([0,3,7,13,35,36,50,51,52,54,],[9,9,-7,9,9,9,-11,-12,9,-8,]),'IDENTIFIER':([0,3,6,7,8,9,11,12,13,17,21,24,29,30,31,35,36,39,50,51,52,54,],[10,10,19,-7,19,19,26,27,10,19,19,19,19,19,19,10,10,19,-11,-12,10,-8,]),'GLOBAL':([0,3,7,13,35,36,50,51,52,54,],[11,11,-7,11,11,11,-11,-12,11,-8,]),'FUN':([0,3,7,13,35,36,50,51,52,54,],[12,12,-7,12,12,12,-11,-12,12,-8,]),'$end':([1,3,7,13,14,28,50,51,54,],[0,-4,-7,-3,-2,-1,-11,-12,-8,]),';':([2,4,5,15,16,18,19,20,33,37,38,41,42,43,44,45,48,],[13,-5,-6,-10,-20,-17,-18,-19,-22,-23,-9,-14,-15,-16,-13,-21,-24,]),'}':([3,7,13,14,28,46,47,50,51,53,54,],[-4,-7,-3,-2,-1,50,51,-11,-12,54,-8,]),'STRING':([6,8,9,17,21,24,29,30,31,32,39,],[16,16,16,16,16,16,16,16,16,44,16,]),'NUMBER':([6,8,9,17,21,24,29,30,31,39,],[18,18,18,18,18,18,18,18,18,18,]),'BOOLEAN':([6,8,9,17,21,24,29,30,31,39,],[20,20,20,20,20,20,20,20,20,20,]),'(':([6,8,9,10,17,21,24,27,29,30,31,39,],[21,21,21,25,21,21,21,40,21,21,21,21,]),'ADD_OP':([6,8,9,15,16,17,18,19,20,21,22,23,24,29,30,31,33,34,37,39,41,42,43,44,45,48,],[17,17,17,29,-20,17,-17,-18,-19,17,29,29,17,17,17,17,-22,29,29,17,-14,-15,-16,-13,-21,29,]),'=':([10,26,],[24,39,]),'MUL_OP':([15,16,18,19,20,22,23,33,34,37,41,42,43,44,45,48,],[30,-20,-17,-18,-19,30,30,-22,30,30,30,-15,-16,-13,-21,30,]),'COMP_OP':([15,16,18,19,20,22,23,33,34,37,41,42,43,44,45,48,],[31,-20,-17,-18,-19,31,31,-22,31,31,31,31,-16,-13,-21,31,]),'+':([16,],[32,]),'{':([16,18,19,20,22,23,33,41,42,43,44,45,49,],[-20,-17,-18,-19,35,36,-22,-14,-15,-16,-13,-21,52,]),')':([16,18,19,20,25,33,34,40,41,42,43,44,45,],[-20,-17,-18,-19,38,-22,45,49,-14,-15,-16,-13,-21,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programme':([0,3,13,35,36,52,],[1,14,28,46,47,53,]),'statement':([0,3,13,35,36,52,],[2,2,2,2,2,2,]),'structure':([0,3,13,35,36,52,],[3,3,3,3,3,3,]),'assignation':([0,3,13,35,36,52,],[4,4,4,4,4,4,]),'funcCall':([0,3,13,35,36,52,],[5,5,5,5,5,5,]),'funcDec':([0,3,13,35,36,52,],[7,7,7,7,7,7,]),'expression':([6,8,9,17,21,24,29,30,31,39,],[15,22,23,33,34,37,41,42,43,48,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programme","S'",1,None,None,None),
  ('programme -> statement ; programme','programme',3,'p_programme_recursive','parser5.py',24),
  ('programme -> structure programme','programme',2,'p_programme_recursive','parser5.py',25),
  ('programme -> statement ;','programme',2,'p_programme_recursive','parser5.py',26),
  ('programme -> structure','programme',1,'p_programme_recursive','parser5.py',27),
  ('statement -> assignation','statement',1,'p_statement','parser5.py',37),
  ('statement -> funcCall','statement',1,'p_statement','parser5.py',38),
  ('structure -> funcDec','structure',1,'p_structure','parser5.py',42),
  ('funcDec -> FUN IDENTIFIER ( ) { programme }','funcDec',7,'p_funcDec','parser5.py',46),
  ('funcCall -> IDENTIFIER ( )','funcCall',3,'p_funcCall','parser5.py',52),
  ('statement -> PRINT expression','statement',2,'p_statement_print','parser5.py',56),
  ('structure -> WHILE expression { programme }','structure',5,'p_structure_while','parser5.py',60),
  ('structure -> IF expression { programme }','structure',5,'p_structure_if','parser5.py',64),
  ('expression -> STRING + STRING','expression',3,'p_expression_add_strings','parser5.py',68),
  ('expression -> expression ADD_OP expression','expression',3,'p_expression_op','parser5.py',73),
  ('expression -> expression MUL_OP expression','expression',3,'p_expression_op','parser5.py',74),
  ('expression -> expression COMP_OP expression','expression',3,'p_expression_comp','parser5.py',78),
  ('expression -> NUMBER','expression',1,'p_expression_num_or_var','parser5.py',82),
  ('expression -> IDENTIFIER','expression',1,'p_expression_num_or_var','parser5.py',83),
  ('expression -> BOOLEAN','expression',1,'p_expression_boolean','parser5.py',87),
  ('expression -> STRING','expression',1,'p_expression_string','parser5.py',91),
  ('expression -> ( expression )','expression',3,'p_expression_paren','parser5.py',95),
  ('expression -> ADD_OP expression','expression',2,'p_minus','parser5.py',99),
  ('assignation -> IDENTIFIER = expression','assignation',3,'p_assignation','parser5.py',103),
  ('assignation -> GLOBAL IDENTIFIER = expression','assignation',4,'p_assignation','parser5.py',104),
]
